---
import '../styles/patterns.css';
import Basic from '../layouts/Basic.astro';
import { YouTube } from 'astro-embed';
import { Image } from 'astro:assets';
import classImage1 from '../assets/images/class/aol-keyword-form.png';
import classImage2 from '../assets/images/class/aol_keywords.jpg';
import classImage3 from '../assets/images/class/lycos.png';
import classImage4 from '../assets/images/class/aol_aim.png';
import classImage5 from '../assets/images/class/myspace_1.png';
import classImage6 from '../assets/images/class/myspace_2.jpg';
import classImage7 from '../assets/images/class/w3c.svg';
---

<Basic>
  <section>
    <div class="container">
      <p class="eyebrow small--extra">Introduction to Designing and Building for Web</p>
      <h1 class="largest">Resources, references, and assets</h1>
      <p>For questions or assistance, please email me at <a href="mailto:daniearbello@gmail.com">danielarbello@gmail.com</a>.</p>

      <details open>
        <summary class="medium">Day 5~14 • 6 May and onward</summary>
        <hr class="light">
        <h2>Lab: Continue to work through DoLs with Dan as support.</h2>

        <h3>Paths to take</h3>
        <ul>
          <li>Use <strong>Webflow</strong> for a limiting but no-code experience.</li>
          <li>Use <strong>Neocities</strong> for a slightly more unlimited experience but you have to write code and repeat yourself.</li>
          <li>Use <strong>Astro.js</strong> to build a website using modern processes. This afford unlimited options and features but is a full code experience.</li>
        </ul>

        <details>
          <summary class="medium">Writing code without Neocities</summary>
          <ul>
            <li>
              <strong>Create a GitHub account</strong>
              <ul>
                <li>Using a personal email address go to <a href="https://github.com/signup" target="_blank">github.com/signup</a> and create an account.</li>
                <li>⚠️ Be mindful of the username, this may travel with you into your future career.</li>
              </ul>
            </li>
            <li>
              <strong>Setup Package Installation Manager</strong>
              <ul>
                <li><strong>macOS:</strong> Open "Terminal" and paste in this command → <code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"</code></li>
                <li><strong>Windows:</strong> Already has a package installation manager.</li>
              </ul>
            </li>
            <li>
              <strong>Install Packages</strong>
              <ul>
                <li>
                  <strong>Install Warp:</strong> Instead of using Terminal you can use a smooth and more helpful tool.
                  <ul>
                    <li>macOS: <code>brew install --cask warp</code></li>
                    <li>Windows: <code>winget install Warp.Warp</code></li>
                  </ul>
                </li>
                <li><strong>Install Node.js:</strong> Go to <a href="https://nodejs.org/en/download/" target="_blank">nodejs.org/en/download</a> and download the latest version for your OS.</li>
              </ul>
            </li>
            <li>
              <strong>Install Astro.js</strong>
              <ul>
                <li>Find a safe space to work in your device's working directory. For Macs that will likely be <code>Macintosh HD/Users/YOUR-USERNAME/</code>. I suggest making a folder here called <code>Sites</code> or similar (i.e., <code>Macintosh HD/Users/YOUR-USERNAME/Sites</code>).</li>
                <li>Open Warp and navigate to your working directory using the <code>cd</code> command. For example, if you made a folder called <code>Sites</code> you would type <code>cd Sites</code>. (Your shell always boots up in this <code>/Users/YOUR-USERNAME/</code> directory.)</li>
                <li>
                  <strong>Create a code respository</strong>
                  <ul>
                    <li>Go to your GitHub dashboard</li>
                    <li>Click on "Repositories"</li>
                    <li>Click on the green "New" button</li>
                    <li>Set yourself as owner</li>
                    <li>Give your code repo a name</li>
                    <li>Scroll down and click "Create repository"</li>
                    <li>Copy the code that looks like this <code>git@github.com:danarbello/test.git</code></li>
                  </ul>
                </li>
                <li>Follow the "…or push an existing repository from the command line" directions and enter each command in Warp</li>
                <li>Once completed, you can begin adding code to your code repo.</li>
                <li>
                  Let's create our first branch and setup Astro!
                  <ul>
                    <li>Make sure you are in your repo's directory (ask Dan).</li>
                    <li>In Warp, enter <code>git checkout -b BRANCH-NAME</code> (replace "BRANCH-NAME" with your branch name like <code>git checkout -b install-astro</code>)</li>
                    <li>Enter <code>npm create astro@latest</code></li>
                    <li>While it loads let's open up <a href="https://docs.astro.build/en/install-and-setup/#install-from-the-cli-wizard" target="_blank">the Astro docs</a></li>
                    <li>The rest of this is like reading a recipe. Follow every appropriate step carefully and you'll have a yummy cake in the end.</li>
                  </ul>
                </li>
                <li>
                  <strong>Setup Vercel</strong>
                  <ul>
                    <li>Go to <a href="https://vercel.com/signup" target="_blank">vercel.com/signup</a> and create an account.</li>
                    <li>Once logged in, click on the "New Project" button.</li>
                    <li>Click on the "Import Git Repository" button.</li>
                    <li>Click on the "Continue with GitHub" button.</li>
                    <li>Click on the "Import" button next to your code repo.</li>
                    <li>Click on the "Deploy" button.</li>
                    <li>Once deployed, click on the "Visit" button to see your site live!</li>
                  </ul>
                </li>
              </ul>
            </li>
            <li>Review "the shell" (Brew, Warp, and Node), GitHub (code repository), Astro (static site framework), and Vercel (virtual hosting).</li>
          </ul>
        </details>
      </details>

      <details>
        <summary class="medium">Day 4 • 1 May</summary>
        <hr class="light">
        <h2>Project Introductions</h2>
        <p>Set up groups or individual objectives and meet with Dan to plan out DoL.</p>
        <p>Questions to ask yourself:</p>
        <ul>
          <li>What is the end result of this project (beyond just turning in a completed DoL)?</li>
          <li>
            How difficult do I want to make the project?
            <ul>
              <li>Writing code will be much more difficult than using a low-/no-code tool.</li>
            </ul>
          <li>
            What are the requirements of the project?
            <ul>
              <li>Is it just text, images, links?</li>
              <li>How automated do you want to make it?</li>
              <li>Is there a form users will have to fill out?</li>
              <li>Do you want anonymous users to create/submit content (submit text/images/links/comments/etc.)?</li>
              <li>Will you need to sell things online?</li>
              <li>Do you have money to pay for tools/services? (The more complex and interactive you make the site the more expensive it will be.)</li>
            </ul>
          </li>
        </ul>
        <h2>Suggested Tech/Platform Stacks</h2>
        <ul>
          <li>
            Low- or no-code methods: Keep it simple and focus on making instead of coding.
            <ul>
              <li><a href="https://webflow.com/pricing">Webflow</a> is a complete no-code solution that allows 2 pages, and 2 sites, for free. Paid plans increase page count and add ecommerce and CMS functionality.</li>
              <li><a href="https://bubble.io/pricing">Bubble.io</a> is a low-code app and web app builder with a free plan. You may not be able to launch anything live with the free plan(?)</li>
            </ul>
          </li>
          <li>
            Write code: Give yourself a serious challenge and write code.
            <ul>
              <li>Use a framework like <a href="https://astro.build/">Astro.js</a>, or write HTML/CSS yourself, and launch on a free virtual hosting service like <a href="https://vercel.com/">Vercel</a> for $0.</li>
              <li>This is opposite of no-code. You'll be writing a lot of code and reading a lot of docs. The only limitations are your patience and time.</li>
              <li>Ecommerce, CMS, and other features will cost money.</li>
            </ul>
          </li>
        </ul>
      </details>
      <details>
        <summary class="medium">Day 3 • 29 April</summary>
        <hr class="light">
        <h2>Paper+Pencil Content Strategy + UX + Priority Guides</h2>
        <ul>
          <li>Walk through a Business Requirements Document: intro to business goals and requirements, understanding purpose and need (<a href="https://docs.google.com/document/d/18jzqCh2HqffuSEZc-uzHt-L1cSFZikyH1gJdN-dW_u0/edit?usp=drive_link" target="_blank">Google Doc →</a>)</li>
          <li>
            From a prompt, students will plan a redesign of a web page for Cuningham.com:
            <ul>
              <li><a href="https://cuningham.com/people/amy-cheever-aia-ncarb-leedr-ap" target="_blank">Example content type →</a></li>
              <li>Aesthetic and tone, content and the copywriting, structure of data, and priority of each section should be considered before or during layout. (See example <a href="https://drive.google.com/drive/folders/1UIIeI-okZCkhWV6GWdcJkBHaDPFyMFzq" target="_blank">Content Strategy Outline [Google Doc]</a>)</li>
              <li>The students will then break these sections into HTML-structure blocks (divs and their nesting, when to use which tags and how, etc.) using paper and pencil comps.</li>
            </ul>
          </li>
        </ul>
      </details>
      <details>
        <summary class="medium">Day 2 • 24 April</summary>
        <hr class="light">
        <h2>Fun Resources</h2>
        <ul>
          <li><a href="https://motherfuckingwebsite.com/" target="_blank">MotherfuckingWebsite.com</li>
          <li><a href="http://bettermotherfuckingwebsite.com/" target="_blank">BetterMotherfuckingWebsite.com</a></li>
          <li><a href="https://perfectmotherfuckingwebsite.com/" target="_blank">PerfectMotherfuckingWebsite.com</a></li>
          <li><a href="https://flexboxfroggy.com/" target="_blank">Flexbox Froggy Game</a>: Learn how to use CSS Flexbox</li>
          <li><a href="https://dev.to/jenniferlynparsons/a-guide-to-basic-css-resources-13nm" target="_blank">Jennifer Parsons' list</a> of helpful front-end resources</li>
          <li><a href="https://codepen.io/" target="_blank">Codepen.io</a>: A free, online sandbox coding environment</li>
        </ul>

        <hr class="light">
        <h2>Today's Agenda</h2>
        <ol>
          <li>Demo a CMS</li>
          <li>Demo a CRM</li>
          <li>Demo user tracking with Google Analytics</li>
          <li>"Everything is a Block" Exercise: Use Duplo blocks to review <strong>HTML</strong>'s block structure on live website(s)</li>
          <li>Interaction and the DOM: <strong>JavaScript</strong> and if-that-than-this logic (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else" target="_blank">MDN sandbox</a>)</li>
          <li>Put a bow on it: <a href="https://docs.google.com/presentation/d/1sy0T7yEY_IkVJ4_MeO2dn1VzY-_5gvGNfBP9S2edGAg/edit?usp=sharing" target="_blank">Review NoCodeConf presentation</a> for an introduction into how/what/why <strong>CSS</strong></li>
        </ol>

        <p><strong>Bonus (time permitting):</strong> Experiment with recreating an annoying "block" in the wild using the whiteboard, Inspector, or CodePen.</p>
      </details>
      <details>

        <summary class="medium">Day 1 • 22 April</summary>

        <p>Some fun resources:</p>
        <ul>
          <li><a href="https://internet-history.webflow.io/" target="_blank">A Brief History of the Internet</a>: a minisite built in Webflow</li>
          <li><a href="https://www.webdesignmuseum.org/" target="_blank">Web Design Museum</a>: See screenshots of website old interfaces</li>
          <li><a href="https://web.archive.org/" target="_blank">Archive.org's Wayback Machine</a>: A repository of website snapshots dating back decades</li>
        </ul>

        <hr class="light">
        <p>1990s: Bulletin Board Systems</p>
        <YouTube
          id="RuZUPpmXfT0"
          params="start=400"
          title="LGR showing a BBS on an old library computer terminal"
        />

        <hr class="light">
        <p>Dial-up and AOL</p>
        <Image src={classImage1} alt="User interface for AOL keyword input" />
        <Image src={classImage2} alt="Book titled AOL Keywords" />

        <hr class="light">
        <p>Search engines begin to pop up: Yahoo, Lycos, etc.</p>
        <Image src={classImage3} alt="Screenshot of Lycos homepage" />

        <hr class="light">
        <p>Chatrooms 2.0 (aka "Instant Messaging")</p>
        <Image src={classImage4} alt="Screenshot of AOL Instant Messenger" />

        <p>Social media is introduced to the world with MySpace</p>
        <Image src={classImage5} alt="Screenshot of basic MySpace profile" />
        <br>
        <br>
        <p>People start teaching themselves basic HTML and CSS in order to customize their pages</p>
        <Image src={classImage6} alt="Screenshot of customized MySpace profile" />
        <br>
        <br>
        <p>Nothing is transparent: all development is quiet and locked behind corporate doors. If you aren't a <strong>webmaster</strong> or working on the engineering team of one of these companies then you've no idea what is going on behind the code.</p>

        <hr class="light">
        <p>How web software is made, tweaked, and maintained nowadays:</p>
        <ul>
          <li><strong>Working privately</strong> at a company like OpenAI and Meta (Facebook, Instagram, Threads, etc.)</li>
          <li><strong>Contributing to open source</strong>: like Chrome, Firefox, Safari, WordPress, and creative commons.</li>
          <li><strong>Contributing to languages and standards</strong> like HTML, CSS are not licensed or licenseable.</li>
          <li><strong>Contributing to working groups</strong>: Collection of people that regularly maintain standards, languages, and softwares for public use like HTML, CSS, and JavaScript.</li>
        </ul>

        <Image src={classImage7} alt="W3C logo" />
        <p><a href="https://www.w3.org/" target="_blank">World Wide Web Consortium (W3C)</a> maintains and upgrades internet software.</p>

        <hr class="light">
        <p>It's <em>systems</em> all the way down.</p>
        <ul>
          <li><strong>Development operations (devOps)</strong>: Where code is launched and kept stable on the internet, like the process of getting into and riding the car or bus that brings you to school</li>
          <li><strong>Back-end</strong>: Where code builds the core of websites, like the bones and organs in your body</li>
          <li><strong>Front-end</strong>: Where code structures and styles what you see, like your hair, skin, clothing, and makeup</li>
          <li><strong>Content</strong>: Where all the data and rules stem from, like the ideas in your brain and the words it speaks out into the world</li>
        </ul>

        <p>Management systems make up the vast majority of the internet nowadays.</p>
        <ul>
          <li><strong>Content Management System (CMS)</strong>: Stores and publishes any kind of data desired in a reusable and redeployable fasion. Think news or blog website.</li>
          <li><strong>Digital Asset Management (DAM)</strong>: Stores massive troves of images, texts, and variants of those. Think library but on the internet.</li>
          <li><strong>Product Information Management (PIM)</strong>: Just like a DAM but stores information and content about products. Think store library but on the internet and locked away.</li>
          <li><strong>Customer Relationship Management (CRM)</strong>: Stores information about real humans and the companies they work for for marketing and advertising purposes. Think like a super secret address book.</li>
          <li><strong>Digital Experience Platform (DXP)</strong>: Compiles all of the above services into a massive monolith of content management and publishing. Think like a machine wired up to every and anything that is connected to the internet.</li>
        </ul>

        <hr class="light">
        <p>Bonus stuff:</p>
        <ul>
          <li>Virtual Private Network: A way to hide where exactly you are accessing the internet from.</li>
          <li>Search is dead: What are algorithms and how content is spoon-fed to users nowadays?</li>
          <li>The difference between algorithms, search configuration, AI, and AGI</li>
          <li>How do websites that don't sell anything make money?</li>
        </ul>

      </details>
    </div>
  </section>
</Basic>
